apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: containerdenynotallowedlabels
spec:
  crd:
    spec:
      names:
        kind: ContainerDenyNotAllowedLabels
      validation:
        openAPIV3Schema:
          properties:
            labels:
              items:
                type: object
              type: array
  targets:
  - libs:
    - "package lib.common\n\ndefault is_gatekeeper = false\n\ncommon_labels := [\n
      \ {\"key\": \"app.kubernetes.io/name\", \"allowedRegex\": \"*\"},\n  {\"key\":
      \"app.kubernetes.io/instance\", \"allowedRegex\": \"*\"},\n  {\"key\": \"app.kubernetes.io/version\",
      \"allowedRegex\": \"*\"},\n  {\"key\": \"app.kubernetes.io/component\", \"allowedRegex\":
      \"*\"},\n  {\"key\": \"app.kubernetes.io/part-of\", \"allowedRegex\": \"*\"},\n
      \ {\"key\": \"app.kubernetes.io/managed-by\", \"allowedRegex\": \"*\"},\n  {\"key\":
      \"objectset.rio.cattle.io/hash\", \"allowedRegex\": \"*\"},\n  {\"key\": \"kubernetes.io/metadata.name\",
      \"allowedRegex\": \"*\"}\n]\n\nhas_field(obj, field) {\n  not object.get(obj,
      field, \"N_DEFINED\") == \"N_DEFINED\"\n}\n\nmissing_field(obj, field) {\n  obj[field]
      == \"\"\n}\n\nmissing_field(obj, field) {\n  not has_field(obj, field)\n}\n\nis_gatekeeper
      {\n  has_field(input, \"review\")\n  has_field(input.review, \"object\")\n}\n\nis_combined
      {\n  has_field(input[_], \"contents\")\n}\n\nresource = input.review.object
      {\n  is_gatekeeper\n}\n\nresource = input {\n  not is_gatekeeper\n  not is_combined\n}\n\nresource
      = input[0].contents {\n  not is_gatekeeper\n  is_combined\n}\n\nparameters =
      input[1].contents.parameters {\n  not is_gatekeeper\n  is_combined\n}\n\nparameters
      = input.parameters {\n  is_gatekeeper\n}\n\ninput_containers[c] {\n  c := resource.spec.containers[_]\n}\n\ninput_containers[c]
      {\n  c := resource.spec.initContainers[_]\n}\n\ninput_containers[c] {\n  c :=
      resource.spec.template.spec.containers[_]\n}\n\ninput_containers[c] {\n  c :=
      resource.spec.template.spec.initContainers[_]\n}\n\ncontains_label(allowedLabels,
      key, value) {\n  allowedLabels[_].key == key\n\n  # do not match if any allowedRegex
      is not defined, or is an empty string\n  allowedLabels[_].allowedRegex != \"\"\n
      \ re_match(allowedLabels[_].allowedRegex, value)\n} else = false {\n  true\n}\n\n\n\nnot_contains_label(labels,
      key, value) {\n  not contains_label(labels, key, value)\n}\n\nis_common_label(key,
      value) {\n  # as of now it is just equality but in future it can be regex\n
      \ common_labels[_].key == key\n} else = false {\n  true\n}\n\nnot_common_label(key,
      value) {\n  not is_common_label(key, value)\n}\n\nhas_key(obj, key) { \n  _
      = obj[key]\n}\n\nnot_has_key(obj, key) {\n  not has_key(obj, key)\n}\n\ncontains_prefix(allowedPrefixes,
      value) {\n  # do not match if any allowedRegex is not defined, or is an empty
      string\n  allowedPrefixes[_] != \"\"\n  startswith(value,allowedPrefixes[_])\n}
      else = false {\n  true\n}\n\nnot_contains_prefix(allowedPrefixes, value) {\n
      \ not contains_prefix(allowedPrefixes, value)\n}"
    rego: |-
      package container_deny_not_allowed_labels

      import data.lib.common as common_lib

      allowedLabels := common_lib.parameters.labels

      definedLabels := common_lib.resource.metadata.labels

      violation[{"msg": msg, "details": {}}] {
        some key
        value := definedLabels[key]
        common_lib.not_contains_label(allowedLabels, key, value)
        common_lib.not_common_label(key, value)
        msg := sprintf("Label <%v: %v> does not satisfy allowed regex", [key, value])
      }
    target: admission.k8s.gatekeeper.sh
status: {}
