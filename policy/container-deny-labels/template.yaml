apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: containerdenylabels
spec:
  crd:
    spec:
      names:
        kind: ContainerDenyLabels
      validation:
        openAPIV3Schema:
          properties:
            labels:
              items:
                type: object
              type: array
  targets:
  - libs:
    - |-
      package k8s

      default is_gatekeeper = false

      has_field(obj, field) {
        not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) {
        obj[field] == ""
      }

      missing_field(obj, field) {
        not has_field(obj, field)
      }

      is_gatekeeper {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      resource = input.review.object {
        is_gatekeeper
      }

      resource = input {
        not is_gatekeeper
      }

      parameters = data.parameters {
        not is_gatekeeper
      }

      parameters = input.parameters {
        is_gatekeeper
      }

      input_containers[c] {
        c := resource.spec.containers[_]
      }

      input_containers[c] {
        c := resource.spec.initContainers[_]
      }

      input_containers[c] {
        c := resource.spec.template.spec.containers[_]
      }

      input_containers[c] {
        c := resource.spec.template.spec.initContainers[_]
      }

      contains_label(labels, label) {
        labels[_] == label
        #labels[_].value == label.allowedvalue
      } else = false {
        true
      }

      not_contains_label(labels, label) {
        not contains_label(labels, label)
      }

      definedLabels := {[label, value] | some label; value := resource.metadata.labels[label]}

      allowedLabels := {[label, value] | some index; label := parameters.labels[index].key; value := parameters.labels[index].allowedvalue}
    rego: |-
      package k8slabels

      import data.k8s


      violation[{"msg": msg, "details": {}}] {

         # always the allowed labels will be larger than the defined labels
         #some i
         k8s.not_contains_label(k8s.allowedLabels,k8s.definedLabels[i])
         msg := sprintf("label '%v':'%v', is not allowed.",[k8s.definedLabels[i][0],k8s.definedLabels[i][1]])
      }
    target: admission.k8s.gatekeeper.sh
status: {}
